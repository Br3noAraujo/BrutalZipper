#!/usr/bin/python3
#! coding: utf-8
"""
BrutalZipper: Efficient compression and decompression of files and directories using zstandard (zstd).
Compatible with Linux, macOS, and Windows.
"""
import argparse
import logging
import os
import sys
import tarfile
import time
from pathlib import Path
from typing import Optional
import zstandard as zstd
from colorama import Fore, Style, init as colorama_init
from tqdm import tqdm
colorama_init(autoreset=True)
logger = logging.getLogger("BrutalZipper")

banner = f"""
⠀⠀⣿⠲⠤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣸⡏⠀⠀⠀⠉⠳⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀________________________________
⠀⣿⠀⠀⠀⠀⠀⠀⠀⠉⠲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀|{Fore.RED} Your files won’t feel a thing.{Fore.RESET} |⠀
⢰⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠲⣄⠀⠀⠀⡰⠋⢙⣿⣦⡀⠀⠀⠀/ ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
⠸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣙⣦⣮⣤⡀⣸⣿⣿⣿⣆⠀/⠀⠀⠀
⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⠀⣿⢟⣫⠟⠋/⠀⠀⠀⠀
⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣷⣷⣿⡁⠀ ⠀⠀⠀⠀⠀
⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢸⣿⣿⣧⣿⣿⣆⠙⢆⡀⠀⠀⠀⠀
⠀.⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣤⣿⣿⣿⡟⠹⣿⣿⣿⣿⣷⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣧⣴⣿⣿⣿⣿⠏⢧⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠈⢳⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡏⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⢳
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠸⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀                                            
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⢠⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠃⢸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣼⢸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀{Fore.RED}By Br3noAraujo{Fore.RESET}
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀{Fore.RED}github.com/br3noaraujo{Fore.RESET}
⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠛⠻⠿⣿⣿⣿⡿⠿⠿⠿⠿⠿⢿⣿⣿⠏⠀
"""


def main():
    class BannerHelpFormatter(argparse.RawTextHelpFormatter):
        def add_usage(self, usage, actions, groups, prefix=None):
            if prefix is None:
                prefix = ''
            banner_str = banner + Style.RESET_ALL
            self.add_text(banner_str)
            super().add_usage(usage, actions, groups, prefix)

    parser = argparse.ArgumentParser(
        description="BrutalZipper: Efficient compression and decompression with zstd.",
        formatter_class=BannerHelpFormatter,
        add_help=False,
        usage="python3 brutalzipper.py (-c | -d) <input> [output] [options]"
    )
    parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS, help='Show this help message and exit')
    parser.add_argument('-l', '--log', action='store_true', help='Enable detailed logging in brutalzipper.log')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-c', '--compress', action='store_true', help='Compress file or directory')
    group.add_argument('-d', '--decompress', action='store_true', help='Decompress .zst file generated by BrutalZipper')
    parser.add_argument('input', help='Input file or directory')
    parser.add_argument('output', nargs='?', help='Output file or directory (optional)')
    parser.add_argument('-L', '--level', type=int, default=3, choices=range(1, 23), metavar='[1-22]', help='Compression level (1-22)')
    parser.add_argument('--ultra', action='store_true', help='Enable ultra mode: maximum compression level and threads')

    if len(sys.argv) == 1:
        print(banner + Style.RESET_ALL)
        print("Usage: python3 brutalzipper.py (-c | -d) <input> [output] [options]")
        print("Try '-h' for more information.")
        sys.exit(0)

    args = parser.parse_args()

    if args.log:
        logging.basicConfig(filename='brutalzipper.log', level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')
        logger.setLevel(logging.INFO)
        logger.info('Logging enabled.')

    if args.compress:
        print(banner + Style.RESET_ALL)
        if args.ultra:
            level = 22
            threads = os.cpu_count() * 2 if os.cpu_count() else 8
            print(Fore.RED + '[ULTRA MODE] Maximum compression and threads enabled.' + Fore.RESET)
        else:
            level = args.level
            threads = os.cpu_count()
        output = args.output or suggest_output_name_compress(args.input)
        compress(args.input, output, level, threads)
    elif args.decompress:
        print(banner + Style.RESET_ALL)
        output = args.output or suggest_output_name_decompress(args.input)
        decompress(args.input, output)


def suggest_output_name_compress(input_path: str) -> str:
    p = Path(input_path)
    if p.is_dir():
        return f"{p.name}.tar.zst"
    else:
        return f"{p.name}.zst"


def suggest_output_name_decompress(input_path: str) -> str:
    p = Path(input_path)
    if str(p).endswith('.tar.zst'):
        return p.stem.replace('.tar', '')
    elif str(p).endswith('.zst'):
        return p.stem
    else:
        return f"{p.stem}_decompressed"


def copy_stream_with_progress(f_in, f_out, total_size: int, desc: str = ""):
    with tqdm(total=total_size, unit='B', unit_scale=True, desc=desc, colour='green') as pbar:
        while True:
            chunk = f_in.read(1024 * 1024)
            if not chunk:
                break
            f_out.write(chunk)
            pbar.update(len(chunk))


def compress(input_path: str, output_path: str, level: int, threads: int = None) -> None:
    """Compress file or directory using zstd, with standard extensions (.zst, .tar.zst)."""
    start_time = time.time()
    input_path_obj = Path(input_path)
    output_path_obj = Path(output_path)

    if not input_path_obj.exists():
        print(f"{Fore.RED}Error: Input file or directory does not exist: {input_path}")
        sys.exit(1)
    if output_path_obj.exists():
        print(f"{Fore.YELLOW}Warning: Output file already exists and will be overwritten: {output_path}")

    try:
        if input_path_obj.is_dir():
            if not str(output_path_obj).endswith('.tar.zst'):
                output_path_obj = output_path_obj.with_suffix('.tar.zst')
            tar_temp = output_path_obj.with_suffix('.tar')
            with tarfile.open(tar_temp, "w") as tar:
                tar.add(input_path, arcname=input_path_obj.name)
            input_to_compress = tar_temp
        else:
            if not str(output_path_obj).endswith('.zst'):
                output_path_obj = output_path_obj.with_suffix('.zst')
            input_to_compress = input_path_obj

        if threads is None:
            threads = os.cpu_count()
        cctx = zstd.ZstdCompressor(level=level, threads=threads)
        total_size = input_to_compress.stat().st_size
        with open(input_to_compress, "rb") as f_in, open(output_path_obj, "wb") as f_out:
            with cctx.stream_writer(f_out) as compressor:
                copy_stream_with_progress(f_in, compressor, total_size, desc="Compressing")
        print(Fore.YELLOW + "Finalizing, please wait..." + Fore.RESET)
        if input_path_obj.is_dir() and 'tar_temp' in locals() and tar_temp.exists():
            tar_temp.unlink()

        end_time = time.time()
        original_size = input_path_obj.stat().st_size if input_path_obj.is_file() else sum(f.stat().st_size for f in input_path_obj.rglob('*') if f.is_file())
        compressed_size = output_path_obj.stat().st_size
        percent = 100 * (1 - compressed_size / original_size) if original_size > 0 else 0
        print(f"{Fore.GREEN}Compression finished in {end_time - start_time:.2f}s")
        print(f"{Fore.WHITE}Original size: {original_size/1e6:.2f} MB")
        print(f"{Fore.RED}Compressed size: {compressed_size/1e6:.2f} MB")
        print(f"{Fore.RED}Compression ratio: {percent:.2f}%")
        print(f"{Fore.BLUE}Output file: {output_path_obj}")
        logger.info(f"Compression: {input_path} -> {output_path_obj} in {end_time - start_time:.2f}s")
    except PermissionError:
        print(f"{Fore.RED}Error: Permission denied when accessing files.")
        logger.error("Permission denied when accessing files.")
        sys.exit(1)
    except Exception as e:
        print(f"{Fore.RED}Unexpected error: {e}")
        logger.error(f"Unexpected error: {e}")
        sys.exit(1)


def decompress(input_path: str, output_path: str) -> None:
    """Decompress .zst or .tar.zst file generated by BrutalZipper."""
    start_time = time.time()
    input_path_obj = Path(input_path)
    output_path_obj = Path(output_path)

    if not input_path_obj.exists():
        print(f"{Fore.RED}Error: Input file does not exist: {input_path}")
        sys.exit(1)

    try:
        if str(input_path_obj).endswith('.tar.zst'):
            temp_tar = output_path_obj.with_suffix('.tar')
        else:
            temp_tar = output_path_obj.with_suffix('')

        dctx = zstd.ZstdDecompressor()
        total_size = input_path_obj.stat().st_size
        with open(input_path_obj, "rb") as f_in, open(temp_tar, "wb") as f_out:
            with dctx.stream_writer(f_out) as decompressor:
                copy_stream_with_progress(f_in, decompressor, total_size, desc="Decompressing")
        print(Fore.YELLOW + "Finalizing, please wait..." + Fore.RESET)
        if tarfile.is_tarfile(temp_tar):
            with tarfile.open(temp_tar, "r") as tar:
                tar.extractall(path=output_path_obj)
            temp_tar.unlink()
            print(f"{Fore.GREEN}Decompression and extraction finished in {time.time() - start_time:.2f}s")
            logger.info(f"Decompression and extraction: {input_path} -> {output_path_obj} in {time.time() - start_time:.2f}s")
        else:
            if temp_tar != output_path_obj:
                temp_tar.rename(output_path_obj)
            print(f"{Fore.GREEN}Decompression finished in {time.time() - start_time:.2f}s")
            logger.info(f"Decompression: {input_path} -> {output_path_obj} in {time.time() - start_time:.2f}s")
    except PermissionError:
        print(f"{Fore.RED}Error: Permission denied when accessing files.")
        logger.error("Permission denied when accessing files.")
        sys.exit(1)
    except Exception as e:
        print(f"{Fore.RED}Unexpected error: {e}")
        logger.error(f"Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
